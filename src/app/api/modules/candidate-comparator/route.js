import { NextResponse } from "next/server";
import { GoogleGenerativeAI } from "@google/generative-ai";

export async function POST(req) {
  try {
    console.log("üì• Recebendo dados...");
    const formData = await req.formData();

    const files = formData.getAll("files");

    const jobData = formData.get("job");

    if (!files || files.length === 0 || !jobData) {
      return NextResponse.json(
        { error: "Arquivos ou dados da vaga ausentes." },
        { status: 400 }
      );
    }

    const job = JSON.parse(jobData);
    if (!job.title || !job.description) {
      return NextResponse.json(
        { error: "Informa√ß√µes da vaga incompletas." },
        { status: 400 }
      );
    }

    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      return NextResponse.json(
        { error: "Chave da API Gemini n√£o configurada." },
        { status: 500 }
      );
    }

    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

    // Converte todos os arquivos para base64
    const candidatesData = await Promise.all(
      files.map(async (file, idx) => {
        const buffer = Buffer.from(await file.arrayBuffer()).toString("base64");
        return {
          fileBase64: buffer,
          index: idx + 1,
          filename: file.name,
        };
      })
    );

    // Cria√ß√£o din√¢mica do prompt
    const prompt = `
Voc√™ √© um analista de recrutamento experiente. Sua miss√£o √© comparar curr√≠culos de candidatos para uma vaga espec√≠fica e determinar **qual √© o melhor candidato**, com justificativas t√©cnicas.

---

üìÑ **Vaga em An√°lise**
- T√≠tulo: ${job.title}
- Descri√ß√£o: ${job.description}

---

‚öôÔ∏è **Sua Tarefa**
1. Avalie individualmente cada curr√≠culo (em PDF).
2. Compare-os entre si com base nos crit√©rios abaixo.
3. Gere um relat√≥rio com:
   - Resumo da an√°lise de cada candidato (com pontua√ß√£o de 0 a 100).
   - Comparativo em formato de tabela.
   - Veredito final: o melhor candidato com **justificativa objetiva**.

---

üìä **Crit√©rios para Avalia√ß√£o**

| Crit√©rio                        | Peso | Descri√ß√£o                                  |
|--------------------------------|------|--------------------------------------------|
| Experi√™ncia Profissional       | 25%  | Relev√¢ncia e senioridade                   |
| Conhecimentos T√©cnicos         | 25%  | Ferramentas, linguagens, tecnologias       |
| Soft Skills                    | 15%  | Comunica√ß√£o, lideran√ßa, resolu√ß√£o de conflitos |
| Forma√ß√£o Acad√™mica             | 10%  | N√≠vel e relev√¢ncia da forma√ß√£o             |
| Alinhamento com a Vaga         | 15%  | Ader√™ncia √† descri√ß√£o e responsabilidades  |
| Clareza e Apresenta√ß√£o do CV   | 10%  | Organiza√ß√£o, objetividade, est√©tica        |

---

üìò **Formato da Resposta Esperada**

## üèÜ Melhor candidato(a)

O melhor candidato √©: **Candidato X**  
Justificativa objetiva: ...  
Recomenda√ß√µes para a empresa: ...

## üßë‚Äçüíª Avalia√ß√£o Individual

### Candidato 1 (ex: ${candidatesData[0].filename})
- Pontua√ß√£o: XX/100
- Destaques:
  - ...
- Fragilidades:
  - ...

### Candidato 2 (ex: ${candidatesData[1]?.filename || "N/A"})
...

## üìä Comparativo Resumido

| Candidato     | Pontua√ß√£o | Melhor Crit√©rio     | Pior Crit√©rio       |
|---------------|-----------|----------------------|----------------------|
| Candidato 1   | 78        | T√©cnicos             | Soft Skills          |
| Candidato 2   | 85        | Experi√™ncia          | Forma√ß√£o             |

‚ö†Ô∏è Evite repeti√ß√µes, floreios ou elogios vazios. Seja direto, t√©cnico e objetivo. A resposta ser√° usada por recrutadores profissionais.
`;

    // Cria√ß√£o do conte√∫do da requisi√ß√£o com os PDFs embutidos
    const requestParts = [
      {
        role: "user",
        parts: [
          { text: prompt },
          ...candidatesData.map((c) => ({
            inlineData: {
              mimeType: "application/pdf",
              data: c.fileBase64,
            },
          })),
        ],
      },
    ];

    const result = await model.generateContent({
      contents: requestParts,
    });

    const output = await result.response.text();

    return NextResponse.json({ output }, { status: 200 });
  } catch (error) {
    console.error("‚ùå Erro ao processar an√°lise:", error);
    return NextResponse.json(
      { error: "Erro ao processar a an√°lise comparativa." },
      { status: 500 }
    );
  }
}
